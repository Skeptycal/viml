{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "viml",
	"patterns": [
		{ "include": "#keywords" },
		{ "include": "#constants" },
		{ "include": "#strings" },
		{ "include": "#punctuation" },
		{ "include": "#support" },
		{ "include": "#storage" },
		{ "include": "#entities" },
		{ "include": "#meta" },
		{ "include": "#variables" },
		{ "include": "#comments" }
	],
	"repository": {
    "storage": {
      "patterns": [
        {
          "match": "\\b(let|unlet|set|setlocal|command|abort)\\b",
          "name": "storage.viml"
        },
        {
          "name": "storage.map.viml",
          "match": "\\b([invtx]?(nore)?map)\\b"
        },
        {
          "name": "storage.type.viml",
          "match": "([<](buffer|BUFFER|silent|SILENT|sid|SID)[>])"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.viml",
          "match": "\\b(if|while|for|return|end(if|for|while)?|au(g|group)|else(if|)?|do|in| : )\\b"
        },
        {
          "name": "keyword.control.viml",
          "match": "\\b(break|continue|try|catch|endtry|finally|throw|range)\\b"
        },
        {
          "name": "keyword.function.viml",
          "match": "\\b(fun|function|endfunction|endfunc)\\b"
        },
        {
          "name": "keyword.other.viml",
          "match": "\\b(normal|silent)\\b"
        },
        {
          "name": "keyword.operator.viml",
          "match": "([#+?!=~\\\\])"
        },
        {
          "name": "keyword.operator.viml",
          "match": " ([:+-.]|[&|]{2})( |$)"
        },
        {
          "name": "keyword.operator.viml",
          "match": "([.]{3})"
        },
        {
          "name": "keyword.operator.viml",
          "match": "( [<>] )"
        }
      ]
		},
		"entities": {
			"patterns": [
        {
          "name": "entity.name.function.viml",
          "match": "(([absg]\\:)?[a-zA-Z0-9_#.]{2,})\\b(?=\\()"
        }
      ]
		},
		"variables": {
			"patterns": [
        {
          "name": "variable.parameter.viml",
          "match": "(?<=\\()([a-zA-Z]+)(?=\\))"
        },
        {
          "name": "variable.other.viml",
          "match": "\\b([absg]:[a-zA-Z0-9_.#]+)\\b(?!\\()"
        }
      ]
		},
		"constants": {
			"patterns": [
        {
          "name": "constant.language.viml",
          "match": "(true|false)"
        },
        {
          "name": "constant.numeric.viml",
          "match": "([0-9]+)"
        },
        {
          "name": "constant.language.map.viml",
          "match": "([<](bs|BS|bar|BAR|cr|CR|esc|ESC|space|SPACE|leader|LEADER|Plug|nop)[>])"
        },
        {
          "name": "constant.language.map.viml",
          "match": "([<](([cCaAmMsS]\\-)?(Tab|up|UP|down|DOWN|left|LEFT|right|RIGHT))[>])"
        },
        {
          "name": "constant.language.map.viml",
          "match": "([<]([cCaAmMsS]-[a-zA-Z0-9])[>])"
        },
        {
          "name": "constant.language.map.viml",
          "match": "([<](F[0-9]+)[>])"
        }
      ]
		},
		"support": {
			"patterns": [
        {
          "name": "support.function.viml",
          "match": "(add|call|delete|empty|extend|get|has|isdirectory|join|printf)(?=\\()"
        },
        {
          "name": "support.function.viml",
          "match": " (call|echo|execute|redir|redraw|sleep|wincmd|setf)"
        },
        {
          "name": "support.type.builtin.viml",
          "match": "(v\\:(true|false|exception|shell_error|val))"
        },
        {
          "name": "support.type.builtin.viml",
          "match": "(&(cpo|previewwindow|rtp|shell(cmdflag|redir)?))"
        },
        {
          "name": "support.type.option.viml",
          "match": "\\b((no)?(hidden|list|modifiable|spell|wrap))"
        }
      ]
    },
		"punctuation": {
			"patterns": [
        {
          "name": "punction.parens.viml",
          "match": "([()])"
        },
        {
          "name": "punction.comma.viml",
          "match": "([,])"
        }
      ]
		},
		"meta": {
			"patterns": [
        {
          "name": "meta.docstring.viml",
          "match": "\"\"\""
        }
      ]
		},
		"strings": {
			"name": "string.quoted.single.viml",
			"begin": "'",
			"end": "('|$)",
			"patterns": []
    },
    "comments": {
      "name": "comment.line.viml",
      "begin": "(\")",
      "end": "$",
      "patterns": []
    }
	},
	"scopeName": "source.viml"
}
