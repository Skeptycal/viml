{
    "$schema": "https://raw.githubusercontent.com/dunstontc/textmate/master/schema/tmLanguage.schema.json",
    "name": "viml",
    "scopeName": "source.viml",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#entity"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#meta"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#support"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#syntax"
        },
        {
            "include": "#commands"
        },
        {
            "include": "#option"
        }
    ],
    "repository": {
        "storage": {
            "patterns": [
                {
                    "match": "\\b(call|let|unlet|set(l|local)?|com(mand)?|abort|autocmd|color(scheme)?)\\b",
                    "name": "storage.viml"
                },
                {
                    "name": "storage.map.viml",
                    "match": "\\b([cinostvx]?(nore)?map)\\b"
                },
                {
                    "name": "storage.type.viml",
                    "match": "([<](?i:BUFFER|EXPR|SILENT|SID)[>])"
                },
                {
                    "name": "storage.plugin.viml",
                    "match": "(Plug|Plugin)"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "keyword.control.viml",
                    "match": "\\b(if|while|for|return|end(if|for|while)?|au(g|group)|else(if|)?|do|in| : )\\b"
                },
                {
                    "name": "keyword.control.viml",
                    "match": "\\b(break|continue|try|catch|endtry|finally|finish|throw|range)\\b"
                },
                {
                    "name": "keyword.function.viml",
                    "match": "\\b(fun|func|function|endfunction|endfunc)\\b"
                },
                {
                    "name": "keyword.other.viml",
                    "match": "\\b(normal|silent)\\b"
                },
                {
                    "include": "#operators"
                }
            ]
        },
        "operators": {},
        "entity": {
            "patterns": [
                {
                    "name": "entity.name.function.viml",
                    "match": "(([absg]\\:)?[a-zA-Z0-9_#.]{2,})\\b(?=\\()"
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "name": "variable.parameter.viml",
                    "match": "(?<=\\()([a-zA-Z]+)(?=\\))"
                },
                {
                    "name": "variable.other.viml",
                    "match": "\\b([absgl]:[a-zA-Z0-9_.#]+)\\b(?!\\()"
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "name": "constant.language.boolean.viml",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.numeric.viml",
                    "match": "([0-9]+)"
                },
                {
                    "name": "constant.language.map.viml",
                    "match": "(?i:[<](BS|BAR|CR|DEL|ESC|SPACE|LEADER|Plug|nop)[>])"
                },
                {
                    "name": "constant.language.map.viml",
                    "match": "([<](([cCaAmMsS]\\-)?(?i:Tab|UP|DOWN|LEFT|RIGHT|SPACE))[>])"
                },
                {
                    "name": "constant.language.map.viml",
                    "match": "([<]([cCaAmMsS]-[a-zA-Z0-9])[>])"
                },
                {
                    "name": "constant.language.map.viml",
                    "match": "([<](F[0-9]+)[>])"
                }
            ]
        },
        "support": {
            "patterns": [
                {
                    "name": "support.function.viml",
                    "match": "(add|call|delete|empty|extend|get|has|isdirectory|join|printf)(?=\\()"
                },
                {
                    "name": "support.function.viml",
                    "match": "\\b(echo(m|hl)?|exe(cute)?|redir|redraw|sleep|so(urce)?|wincmd|setf)\\b"
                },
                {
                    "name": "support.type.builtin.viml",
                    "match": "(v\\:(true|false|count|exception|operator|register|shell_error|val|version))"
                },
                {
                    "name": "support.type.builtin.viml",
                    "match": "(&(cpo|omnifunc|paste|previewwindow|rtp|tags|term|shell(cmdflag|redir)?)|wrap)"
                },
                {
                    "name": "support.variable.args.viml",
                    "match": "\\<args\\>"
                },
                {
                    "name": "support.type.syntax.viml",
                    "match": "(None|ErrorMsg|WarningMsg)"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punction.parens.viml",
                    "match": "([()])"
                },
                {
                    "name": "punction.comma.viml",
                    "match": "([,])"
                }
            ]
        },
        "meta": {
            "patterns": [
                {
                    "name": "meta.docstring.viml",
                    "match": "\"\"\""
                }
            ]
        },
        "strings": {},
        "comment": {},
        "syntax": {},
        "option": {},
        "commands": {
            "patterns": [
                {
                    "name": "support.type.event.viml",
                    "match": "\\b(BufNewFile|BufReadPre|BufRead|BufReadPost|BufReadCmd|FileReadPre|FileReadPost|FileReadCmd|FilterReadPre|FilterReadPost|StdinReadPre|StdinReadPost|BufWrite|BufWritePre|BufWritePost|BufWriteCmd|FileWritePre|FileWritePost|FileWriteCmd|FileAppendPre|FileAppendPost|FileAppendCmd|FilterWritePre|FilterWritePost|BufAdd|BufCreate|BufDelete|BufWipeout|BufFilePre|BufFilePost|BufEnter|BufLeave|BufWinEnter|BufWinLeave|BufUnload|BufHidden|BufNew|SwapExists|TermOpen|TermClose|FileType|Syntax|OptionSet|VimEnter|GUIEnter|GUIFailed|TermResponse|QuitPre|VimLeavePre|VimLeave|DirChanged|FileChangedShell|FileChangedShellPost|FileChangedRO|ShellCmdPost|ShellFilterPost|CmdUndefined|FuncUndefined|SpellFileMissing|SourcePre|SourceCmd|VimResized|FocusGained|FocusLost|CursorHold|CursorHoldI|CursorMoved|CursorMovedI|WinNew|WinEnter|WinLeave|TabEnter|TabLeave|TabNew|TabNewEntered|TabClosed|CmdlineEnter|CmdlineLeave|CmdwinEnter|CmdwinLeave|InsertEnter|InsertChange|InsertLeave|InsertCharPre|TextYankPost|TextChanged|TextChangedI|ColorScheme|RemoteReply|QuickFixCmdPre|QuickFixCmdPost|SessionLoadPost|MenuPopup|CompleteDone|User)\\b"
                },
                {
                    "name": "storage.other.command.viml",
                    "match": "\\bcom"
                },
                {
                    "name": "support.type.option.viml",
                    "match": "(?i:\\b(no)?(cursorline|hidden|laststatus|list|modifiable|spell|statusline|swapfile|wrap))"
                },
                {
                    "begin": "(aug(roup)?)",
                    "end": "(augroup\\sEND|$)",
                    "name": "support.function.augroup.viml"
                }
            ]
        }
    }
}
